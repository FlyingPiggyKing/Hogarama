apiVersion: v1
kind: Template
metadata:
  creationTimestamp: null
  name: grafana
objects:
apiVersion: v1
kind: Template
metadata:
  creationTimestamp: null
  name: grafana-data
objects:
- apiVersion: v1
  kind: PersistentVolumeClaim
  metadata:
    annotations:
      pv.kubernetes.io/bind-completed: "yes"
      pv.kubernetes.io/bound-by-controller: "yes"
    creationTimestamp: null
    name: grafana-data
  spec:
    accessModes:
    - ReadWriteOnce
    resources:
      requests:
        storage: 2Gi
    volumeName: pv0083
  status: {}
- apiVersion: v1
  kind: ImageStream
  metadata:
    annotations:
      openshift.io/generated-by: OpenShiftNewApp
      openshift.io/image.dockerRepositoryCheck: 2019-03-19T13:50:20Z
    creationTimestamp: null
    generation: 5
    labels:
      app: grafana
    name: grafana
  spec:
    lookupPolicy:
      local: false
    tags:
    - annotations:
        openshift.io/imported-from: grafana/grafana
      from:
        kind: DockerImage
        name: grafana/grafana:latest
      generation: 5
      importPolicy:
        scheduled: true
      name: latest
      referencePolicy:
        type: Source
  status:
    dockerImageRepository: ""
- apiVersion: v1
  kind: DeploymentConfig
  metadata:
    annotations:
      openshift.io/generated-by: OpenShiftNewApp
    creationTimestamp: null
    generation: 1
    labels:
      app: grafana
    name: grafana
  spec:
    replicas: 1
    selector:
      app: grafana
      deploymentconfig: grafana
    strategy:
      activeDeadlineSeconds: 21601
      resources: {}
      rollingParams:
        intervalSeconds: 1
        maxSurge: 25%
        maxUnavailable: 25%
        timeoutSeconds: 600
        updatePeriodSeconds: 1
      type: Rolling
    template:
      metadata:
        annotations:
          openshift.io/generated-by: OpenShiftNewApp
        creationTimestamp: null
        labels:
          app: grafana
          deploymentconfig: grafana
      spec:
        containers:
        - image: grafana/grafana:latest
          imagePullPolicy: Always
          name: grafana
          ports:
          - containerPort: 3000
            protocol: TCP
          resources: {}
          terminationMessagePath: /dev/termination_log
          terminationMessagePolicy: File
          volumeMounts:
          - mountPath: /var/lib/grafana
            name: grafana-data
          - mountPath: /usr/share/grafana/conf/
            name: grafana-config-example-volume
          - mountPath: /etc/grafana/provisioning/dashboards
            name: grafana-config-provisioning-volume
          - mountPath: /var/lib/grafana/dashboards
            name: grafana-config-dashboards-volume
          - mountPath: /etc/grafana/provisioning/datasources
            name: grafana-datasource-volume
        dnsPolicy: ClusterFirst
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext: {}
        terminationGracePeriodSeconds: 30
        volumes:
        - name: grafana-data
          persistentVolumeClaim:
            claimName: grafana-data
        - configMap:
            defaultMode: 420
            name: grafana-config
          name: grafana-config-example-volume
        - configMap:
            defaultMode: 420
            name: grafana-provisioning
          name: grafana-config-provisioning-volume
        - configMap:
            defaultMode: 420
            name: grafana-dashboards
          name: grafana-config-dashboards-volume
        - configMap:
            defaultMode: 420
            name: grafana-datasource
          name: grafana-datasource-volume
    test: false
    triggers:
    - type: ConfigChange
    - imageChangeParams:
        automatic: true
        containerNames:
        - grafana
        from:
          kind: ImageStreamTag
          name: grafana:latest
          namespace: hogarama
      type: ImageChange
  status:
    availableReplicas: 0
    latestVersion: 0
    observedGeneration: 0
    replicas: 0
    unavailableReplicas: 0
    updatedReplicas: 0
- apiVersion: v1
  kind: Route
  metadata:
    annotations:
      openshift.io/host.generated: "true"
    creationTimestamp: null
    labels:
      app: grafana
    name: grafana
  spec:
    port:
      targetPort: 3000-tcp
    to:
      kind: Service
      name: grafana
      weight: 100
    wildcardPolicy: None
- apiVersion: v1
  kind: Service
  metadata:
    annotations:
      openshift.io/generated-by: OpenShiftNewApp
    creationTimestamp: null
    labels:
      app: grafana
    name: grafana
  spec:
    ports:
    - name: 3000-tcp
      port: 3000
      protocol: TCP
      targetPort: 3000
    selector:
      app: grafana
      deploymentconfig: grafana
    sessionAffinity: None
    type: ClusterIP
  status:
    loadBalancer: {}
